@using System.ComponentModel.DataAnnotations
@inject APIService ApiService
@inject StorageService StorageService

<div class="modal fade" id="loginModal" tabindex="-1" aria-labelledby="loginModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1>Login</h1>
            </div>
            @if (!_isUserLoggedIn)
            {
                <EditForm Model="@_loginDto" OnValidSubmit="LoginUser">
                    <DataAnnotationsValidator/>
                    <ValidationSummary/>

                    <label>
                        Email
                    </label>
                    <InputText @bind-Value="_loginDto.Email"/>

                    <label>
                        Password
                    </label>
                    <InputText @bind-Value="_loginDto.Password"/>

                    <button>Click</button>
                </EditForm>
            }
            else
            {
                <button class="btn btn-danger" @onclick="LogUserOut">Logout</button>
            }

            <h1>Register</h1>
            <EditForm Model="@_loginModel" OnValidSubmit="RegisterUser">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <label>
                    Email
                </label>
                <InputText @bind-Value="_loginModel.Email"></InputText>

                <label>
                    Password
                </label>
                <InputText @bind-Value="_loginModel.Password"></InputText>

                <label>
                    Repeat Password
                </label>
                <InputText @bind-Value="_loginModel.SamePassword"></InputText>

                <label>
                    Username
                </label>
                <InputText @bind-Value="_loginModel.Username"></InputText>

                <button type="submit">Click</button>
            </EditForm>
            <div class="modal-body"></div>
        </div>
    </div>
</div>


@code {
    LoginModel _loginModel = new();
    LoginDto _loginDto = new();
    bool _isUserLoggedIn;
    [Inject] public required IJSRuntime JS { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var token = await StorageService.GetItemFromStorageAsync("authToken");
        if (string.IsNullOrEmpty(token))
        {
            Console.WriteLine("User is not logged in");
            _isUserLoggedIn = false;
            return;
        }

        var (status, msg, bodyDto) = await ApiService.ValidateToken(token);
        if (!status)
        {
            await LogUserOut();
            _isUserLoggedIn = false;
            await JS.InvokeVoidAsync("alert", "User was not logged in: " + msg);
            return;
        }

        var dtoJson = System.Text.Json.JsonSerializer.Serialize(bodyDto);
        await StorageService.SaveItemToSessionAsync("user", dtoJson);
        _isUserLoggedIn = true;
        await JS.InvokeVoidAsync("alert", "user in :)");
        Console.WriteLine("User is logged in");
    }

    private async Task LogUserOut()
    {
        await StorageService.RemoveItemFromStorageAsync("authToken");
        await StorageService.RemoveItemFromSessionAsync("user");
        _isUserLoggedIn = false;
        StateHasChanged();
    }

    private async Task RegisterUser()
    {
        Console.WriteLine("Email: " + _loginModel.Email);
        Console.WriteLine("Password: " + _loginModel.Password);
        Console.WriteLine("Same password: " + _loginModel.SamePassword);
        Console.WriteLine("user: " + _loginModel.Username);

        try
        {
            var (status, msg) = await ApiService.RegisterUser(_loginModel.Email, _loginModel.Username, _loginModel.Password);
            await JS.InvokeVoidAsync("alert", msg);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Generel exception caught registering user: " + ex.Message);
            await JS.InvokeVoidAsync("alert", "Generel exception caught registering user: " + ex.Message);
            return;
        }
    }

    private async Task LoginUser()
    {
        Console.WriteLine($"Logging in with {_loginDto.Email} and {_loginDto.Password}");

        try
        {
            var (status, msg, response) = await ApiService.LoginUser(_loginDto.Email, _loginDto.Password);
            // await JS.InvokeVoidAsync("alert", msg);
            if (status && response != null)
            {
                if (!string.IsNullOrEmpty(response.token))
                {
                    await StorageService.SaveItemToStorageAsync("authToken", response.token);
                    var userJson = System.Text.Json.JsonSerializer.Serialize(response.user);
                    await StorageService.SaveItemToSessionAsync("user", userJson);
                    
                    _isUserLoggedIn = true;
                }
                else
                    await JS.InvokeVoidAsync("alert", "Token is null");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Generel exception caught loging user in: " + ex.Message);
            await JS.InvokeVoidAsync("alert", "Generel exception caught loging user in: " + ex.Message);
            return;
        }

        StateHasChanged();
    }

    private class LoginModel
    {
        [EmailAddress(ErrorMessage = "Invalid Email Address")]
        [Required(ErrorMessage = "Email is required")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        [MinLength(8, ErrorMessage = "Password must be at least 8 characters long")]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$",
            ErrorMessage =
                "Password must contain at least one number, one uppercase letter, one lowercase letter, and one special character")]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Please confirm password")]
        [Compare("_password", ErrorMessage = "Passwords do not match")]
        public string SamePassword { get; set; } = "";

        [Required(ErrorMessage = "Enter identifiable name")]
        public string Username = "";
    }

}