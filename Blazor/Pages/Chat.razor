@inject HubConnection HubConnection
@using Microsoft.AspNetCore.SignalR.Client
@page "/chat"
@inject NavigationManager Navigation

<h3>Global Chat test</h3>

<input @bind="message" placeholder="Enter a message" @onkeydown="OnKeyDown" />

<ul>
    @foreach (var msg in messages)
    {
        <li>@msg</li>
    }
</ul>

@code {
    private string? message;
    private List<string> messages = new();

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to ReceiveMessage
        HubConnection.On<string, string>("ReceiveMessage", (user, msg) =>
        {
            messages.Add($"{user}: {msg}");
            StateHasChanged();
        });

        try
        {
            // Start the connection
            await HubConnection.StartAsync();
            Console.WriteLine("SignalR connection started.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting connection: {ex.Message}");
        }
    }

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            // Do not process if the input is empty
            if (!string.IsNullOrEmpty(message))
            {
                await SendMessage();
            }
        }
    }

    private async Task SendMessage()
    {
        if (HubConnection.State == HubConnectionState.Connected)
        {
            await HubConnection.SendAsync("SendMessage", "User1", message);
            message = string.Empty; // Clear the message input after sending
        }
    }
}