@page "/new-booking"
@using System.Text.Json
@inject APIService API
@inject IJSRuntime JS
@inject BookingService BookingService
@inject StorageService StorageService
@inject BookingStateService BookingState
<div style="padding: 1rem;">
    <div class="card-body rounded border shadow-sm mb-2">
    <div class="booking-container">
    <!-- Date Selection Section -->
    <div class="date-section">
        <h4>Select Dates</h4>
        <div class="date-inputs">
            <div class="flex-fill">
                <label>Check-in Date</label>
                <InputDate TValue="DateOnly" @bind-Value="@startingDate" class="form-control" Placeholder="Enter Date"/>
            </div>
            <div class="flex-fill">
                <label>Check-out Date</label>
                <InputDate TValue="DateOnly" @bind-Value="@endingDate" class="form-control" Placeholder="Enter Date"/>
            </div>
        </div>
        
        <div class="mb-3">
            <small class="text-muted">Check-in: @startingDate.ToString("MMM dd, yyyy")</small><br/>
            <small class="text-muted">Check-out: @endingDate.ToString("MMM dd, yyyy")</small><br/>
            <small class="text-muted">Nights: @_daysSpent</small>
        </div>
        
        @if (_loadingRooms)
        {
            <Loading/>
        }
        else
        {
            <button @onclick="GetRoomsWithinTimeRange" class="btn btn-primary">Search Available Rooms</button>
        }
    </div>

    <!-- Selected Rooms Section -->
    @if (_currentRooms.Any())
    {
        <div class="selected-rooms-section">
            <h5>Selected Rooms</h5>
            <ul class="room-list">
                @foreach (var r in _currentRooms)
                {
                    <li class="room-item">
                        Room @r.Id - @r.Price.ToString("C") per night
                        <button class="btn btn-danger btn-sm ms-2" @onclick="() => RemoveRoom(r)">Remove</button>
                    </li>
                }
            </ul>
        </div>
    }

    <!-- Total Price Section -->
    <div class="price-section">
        <h2>Total Price: 
            @if (_currentRooms.Any())
            {
                <span>@CalcPrice().ToString("C")</span>
            }
            else
            {
                <span>0.00 kr.</span>
            }
        </h2>
    </div>

    <!-- Booking Options Section -->
    <div class="booking-options-section">
        <h5>Booking Details</h5>
        <div class="options-row">
            <div class="option-col">
                <label class="form-label">
                    Adults
                    <InputNumber @bind-Value="_newBookingDto.Adults" class="form-control"/>
                </label>
            </div>
            <div class="option-col">
                <label class="form-label">
                    Children
                    <InputNumber @bind-Value="_newBookingDto.Children" class="form-control"/>
                </label>
            </div>
            <div class="option-col">
                <div class="form-check">
                    <InputCheckbox @bind-Value="_newBookingDto.RoomService" class="form-check-input" id="roomService"/>
                    <label class="form-check-label" for="roomService">
                        Room Service (@ROOM_SERVICE_PRICE.ToString("C"))
                    </label>
                </div>
            </div>
            <div class="option-col">
                <div class="form-check">
                    <InputCheckbox @bind-Value="_newBookingDto.Breakfast" class="form-check-input" id="breakfast"/>
                    <label class="form-check-label" for="breakfast">
                        Breakfast (@BREAKFAST_PRICE.ToString("C"))
                    </label>
                </div>
            </div>
            <div class="option-col">
                <div class="form-check">
                    <InputCheckbox @bind-Value="_newBookingDto.Dinner" class="form-check-input" id="dinner"/>
                    <label class="form-check-label" for="dinner">
                        Dinner (@DINNER_PRICE.ToString("C"))
                    </label>
                </div>
            </div>
        </div>
    </div>

    <!-- Create Booking Button -->
    <div class="text-center mb-4">
        <button @onclick="CreateBooking" class="btn btn-success btn-lg">Complete Booking</button>
    </div>

    <!-- Available Rooms Section -->
    @if (_availableRooms != null)
    {
        <div class="available-rooms-section">
            <h5>Available Rooms</h5>
            <div class="rooms-grid">
                @foreach (var r in _availableRooms)
                {
                    <div class="room-card-wrapper">
                        <div class="card-body rounded border shadow-sm mb-2">
                            <RoomCard room="r"></RoomCard>
                            <div class="text-center mt-2">
                                <button class="btn btn-primary" @onclick="() => AddRoomId(r)">Add Room</button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>
</div>
</div>

@code {

    private DateOnly startingDate = DateOnly.FromDateTime(DateTime.Now);
    private DateOnly endingDate = DateOnly.FromDateTime(DateTime.Now.AddDays(1));
    private int _daysSpent;
    double ROOM_SERVICE_PRICE;
    double BREAKFAST_PRICE;
    double DINNER_PRICE;
    bool _loadingRooms;
    List<Room>? _availableRooms;
    List<Room> _currentRooms = [];
    NewBookingDto _newBookingDto = new();

    protected override async Task OnInitializedAsync()
    {
        // Check if we have pre-selected data from room page calendar
        if (BookingState.SelectedStartDate.HasValue)
        {
            startingDate = BookingState.SelectedStartDate.Value; // Use .Value to get DateOnly from DateOnly?
            endingDate = startingDate.AddDays(1); // defaults to 1 night
            
            // Auto-loads the specific room from page calendar
            if (!string.IsNullOrEmpty(BookingState.PreSelectedRoomId))
            {
                try
                {
                    var room = await API.GetRoomById(BookingState.PreSelectedRoomId);
                    if (room != null)
                    {
                        _currentRooms.Add(room);
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error loading pre-selected room: {ex.Message}");
                }
            }
            
            // Clear the booking state after using it
            BookingState.Clear();
        }

        ROOM_SERVICE_PRICE = BookingService.ROOM_SERVICE_PRICE;
        BREAKFAST_PRICE = BookingService.BREAKFAST_PRICE;
        DINNER_PRICE = BookingService.DINNER_PRICE;
        SetDaysSpent();
    }

    private double CalcPrice()
    {
        if (_currentRooms.Any())
        {
            var price = _currentRooms.Sum(r => r.Price) * _daysSpent +
                          (_newBookingDto.RoomService ? ROOM_SERVICE_PRICE : 0) +
                          (_newBookingDto.Breakfast ? BREAKFAST_PRICE : 0) +
                          (_newBookingDto.Dinner ? DINNER_PRICE : 0);

            _newBookingDto.TotalPrice = price;
            return price;
        }

        return 0;
    }

    private async Task GetRoomsWithinTimeRange()
    {
        _loadingRooms = true;
        StateHasChanged();

        ResetValues();

        try
        {
            TimeService helper = new();
            var startDateUtc = helper.TranslateToUtc(startingDate);
            var endDateUtc = helper.TranslateToUtc(endingDate);
            SetDaysSpent();
            Console.WriteLine("Start: " + startDateUtc);
            Console.WriteLine("End: " + endDateUtc);

            _availableRooms = await API.GetRoomsByAvailableDates(startDateUtc, endDateUtc);
            _loadingRooms = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            return;
        }
    }

    private void SetDaysSpent() => _daysSpent = endingDate.DayNumber - startingDate.DayNumber;
    private void RemoveRoom(Room room) => _currentRooms.Remove(room);

    private async Task AddRoomId(Room room)
    {
        // Check if id is already in the list

        if (!_currentRooms.Contains(room))
        {
            _currentRooms.Add(room);
            StateHasChanged();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Room already added");
        }
    }

    private async Task CreateBooking()
    {
        if (!_currentRooms.Any())
        {
            await JS.InvokeVoidAsync("alert", "No rooms added");
            return;
        }

        string? jwtToken = await StorageService.GetItemFromLocalStorageAsync("authToken");
        if (string.IsNullOrEmpty(jwtToken))
        {
            await JS.InvokeVoidAsync("alert", "Please log in");
            return;
        }

        TimeService helper = new();

        _newBookingDto.occupiedFrom = helper.TranslateToUtc(startingDate);
        _newBookingDto.occupiedTill = helper.TranslateToUtc(endingDate);

        foreach (var room in _currentRooms)
        {
            _newBookingDto.RoomIds.Add(room.Id);
        }

        var result = await API.CreateBookingAsync(_newBookingDto, jwtToken);
        await JS.InvokeVoidAsync("alert", result);
    }

    private void ResetValues()
    {
        _currentRooms = [];
    }

    private async Task<string> SetUserId(string jwtToken)
    {
        var token = await StorageService.GetItemFromSessionStorageAsync("user");
        var options = new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true
        };
        var sessionToken = JsonSerializer.Deserialize<SessionTokenDto>(token, options)!;
        return sessionToken.Id;
    }
}