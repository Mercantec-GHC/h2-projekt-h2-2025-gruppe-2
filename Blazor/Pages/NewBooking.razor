@page "/new-booking"
@using System.Text.Json
@inject APIService API
@inject IJSRuntime JS
@inject StorageService StorageService

<div class="row mb-2">
    <div class="col-6">
        <div class="mb-3">
            <InputDate TValue="DateOnly" @bind-Value="@startingDate" Placeholder="Enter Date"/>
            <InputDate TValue="DateOnly" @bind-Value="@endingDate" Placeholder="Enter Date"/>
        </div>
        <div class="mb-3">Entered date: @startingDate</div>
        <div class="mb-3">Entered date: @endingDate</div>
        <button @onclick="GetRoomsWithinTimeRange" class="btn btn-primary">Get rooms by date</button>
    </div>
    <div class="col-6">
        @if (_roomIds.Any())
        {
            <div class="mb-3">
                <label>Room IDs</label>
                <ul>
                    @foreach (var r in _roomIds)
                    {
                        <li>@r</li>
                    }
                </ul>
            </div>
        }
    </div>
</div>

<div class="row">
    <div class="col">
        <label>
            Adults
            <InputNumber @bind-Value="_bookingDto.Adults" class="form-control" />
        </label>
    </div>
    <div class="col">
        <label>
            Children
            <InputNumber @bind-Value="_bookingDto.Children" class="form-control" />
        </label>
    </div>
    <div class="col">
        <label>
            Room service
            <InputCheckbox @bind-Value="_bookingDto.RoomService" class="form-check-input" />
        </label>
    </div>
    <div class="col">
        <label>
            Breakfast
            <InputCheckbox @bind-Value="_bookingDto.Breakfast" class="form-check-input" />
        </label>
    </div>
    <div class="col">
        <label>
            Dinner
            <InputCheckbox @bind-Value="_bookingDto.Dinner" class="form-check-input" />
        </label>
    </div>

</div>

<button @onclick="CreateBooking" class="btn btn-primary">Create booking</button>

@if (_availableRooms != null)
{
    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-3">
        @foreach (var r in _availableRooms)
        {
            <div class="col" style="height: 100%;">
                <HotelRoom room="r"></HotelRoom>
                <button class="btn btn-primary" @onclick="() => AddRoomId(r.Id)">Add room</button>
            </div>
        }
    </div>
}

@code {

    private DateOnly startingDate = DateOnly.FromDateTime(DateTime.Now.AddDays(1));
    private DateOnly endingDate = DateOnly.FromDateTime(DateTime.Now.AddDays(1));
    List<Room>? _availableRooms;
    List<string> _roomIds = [];
    BookingDto _bookingDto = new();

    private async Task GetRoomsWithinTimeRange()
    {
        try
        {
            TimeService helper = new();
            var startDateUtc = helper.TranslateToUtc(startingDate);
            var endDateUtc = helper.TranslateToUtc(endingDate); 
            Console.WriteLine("Start: " + startDateUtc);
            Console.WriteLine("End: " + endDateUtc);

            _availableRooms = await API.GetRoomsByAvailableDates(startDateUtc, endDateUtc);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            return;
        }
    }

    private async Task AddRoomId(string id)
    {
        // Check if id is already in the list

        if (!_roomIds.Contains(id))
        {
            _roomIds.Add(id);
            StateHasChanged();
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Room already added");
        }
    }

    private async Task CreateBooking()
    {
        if (!_roomIds.Any())
        {
            await JS.InvokeVoidAsync("alert", "No rooms added");
            return;
        }
        
        TimeService helper = new();
        
        _bookingDto.occupiedFrom = helper.TranslateToUtc(startingDate);
        _bookingDto.occupiedTill = helper.TranslateToUtc(endingDate);

        var jwtToken = await StorageService.GetItemFromStorageAsync("authToken");
        _bookingDto.UserId = await SetUserId(jwtToken);

        _bookingDto.RoomIds = _roomIds;
        
        var result = await API.CreateBooking(_bookingDto, jwtToken);
        await JS.InvokeVoidAsync("alert", result);
    }

    private async Task<string> SetUserId(string jwtToken)
    {
        var token = await StorageService.GetItemFromSessionStorageAsync("user");
        var options = new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true
        };
        var sessionToken = JsonSerializer.Deserialize<SessionTokenDto>(token, options)!;
        return sessionToken.Id;
    }
}