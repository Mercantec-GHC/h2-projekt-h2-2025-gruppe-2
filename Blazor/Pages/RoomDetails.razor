@page "/room/{id}"
@using DomainModels
@using Blazor.Services
@inject StorageService Storage
@inject APIService API
@if (error is not null)
    
{
    <div class="alert alert-danger">@error</div>
}
else if (loading)
{
    <h3>Loading room details...</h3>
}
else if (room is null)
{
    <div class="alert alert-info">Room not found D:</div>
}
else
{
    <div style="padding: 1rem;">
    <div class="card-body rounded border shadow-sm mb-2">
        <div class="row">
            <div class="col-md-6">
                <img class="room-img w-100"
                     alt="Room @room.Id"
                     src="https://external-content.duckduckgo.com/iu/?u=http%3A%2F%2Fcache.marriott.com%2Fmarriottassets%2Fmarriott%2FLONPL%2Flonpl-guestroom-0117-hor-clsc.jpg%3Finterpolation%3Dprogressive-bilinear%26&f=1&nofb=1&ipt=ebe42a9838514aada588f06e57dcb5cd12e793934a0fcacb6a5e5df2d252dbf8" />
            </div>
            <div class="col-md-6"> 
                <div class="card-body" style="padding: 1rem;">
                    <h5 class="card-title mb-3">Room @room.Id</h5>

                    <ul class="list-unstyled small mb-3">
                        <li><strong>Total Beds:</strong> @room.Beds</li>

                        @* Bed type counts only if > 0 so no dupes *@
                        @if (room.KingBeds > 0) { <li><strong>King beds:</strong> @room.KingBeds</li> }
                        @if (room.QueenBeds > 0) { <li><strong>Queen beds:</strong> @room.QueenBeds</li> }
                        @if (room.TwinBeds  > 0) { <li><strong>Twin beds:</strong> @room.TwinBeds</li> }
                        @if (room.Size      > 0) { <li><strong>Size (mÂ²):</strong> @room.Size</li> }
                        @if (room.Tv        > 0) { <li><strong>TVs:</strong> @room.Tv</li> }

                        <li><strong>Price:</strong> @room.Price.ToString("C")</li>
                    </ul>

                    @* Boolean amenities as badges bc its pretti *@
                    <div class="d-flex flex-wrap gap-2">
                        @foreach (var amenity in GetAmenityBadges(room))
                        {
                            <span class="badge bg-primary">@amenity</span>
                        }
                    </div>

                    @if (!string.IsNullOrWhiteSpace(room.Description))
                    {
                        <hr />
                        <p class="mb-0">@room.Description</p>
                    }
                </div>
            </div>
        </div>
    </div>
    </div>
       <h4>Availability:</h4>
    <RoomCalender Id="@room.Id"></RoomCalender>
}

@code {
    [Parameter] public string id { get; set; }

    DomainModels.Room? room;
    bool loading = true;
    string? error;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            CacheWrapper<Room>? cachedRoom = await Storage.GetCacheObjectFromLocalStorageAsync<Room>("room" + id);
            if (cachedRoom != null && cachedRoom.Expiry > DateTime.UtcNow)
            {
                Console.WriteLine("Using chached room");
                room = cachedRoom.Data;
                return;
            }
            
            room = await API.GetRoomById(id);
            await Storage.SaveCacheObjectToLocalStorageAsync("room" + id, room, TimeSpan.Zero.Add(TimeSpan.FromMinutes(10) + TimeSpan.FromHours(2)));
        }
        catch (Exception ex)
        {
            error = "Failed: " + ex.Message;
        }
        finally
        {
            loading = false;
        }
    }

    // collects only true bools
    private static IEnumerable<string> GetAmenityBadges(Room r)
    {
        if (r.Bathroom)  yield return "Bathroom";
        if (r.Bathtub)   yield return "Bathtub";
        if (r.WiFi)      yield return "WiFi";
        if (r.Fridge)    yield return "Fridge";
        if (r.Stove)     yield return "Stove";
        if (r.Oven)      yield return "Oven";
        if (r.Microwave) yield return "Microwave";
    }
}