@page "/login"
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@inject IJSRuntime JS
@inject APIService ApiService
@inject StorageService StorageService
@inject AuthService AuthService

@if (_userInfo != null)
{
    <h1>Welcome back @_userInfo.Username</h1>
    <p>@_userInfo.Id</p>
    <p>@_userInfo.Email</p>
    <p>@_userInfo.HashedPassword</p>
    <p>@_userInfo.Salt</p>
    <p>@_userInfo.Role</p>
    <p>@_userInfo.RoleId</p>
    <p>@_userInfo.LastLogin</p>
    <p>@_userInfo.CreatedAt</p>
    <p>@_userInfo.UpdatedAt</p>

    <div class="row my-2">
        <div class="col col-sm-6 col-md-6 col-lg-6 col-xl-6">
            <h2>Change Password</h2>
            <EditForm Model="@_changePassword" OnValidSubmit="ChangePassword">
                <DataAnnotationsValidator/>
                <ValidationSummary/>
                <label>Current Password</label>
                <InputText class="form-control" @bind-Value="_changePassword.CurrentPassword"></InputText>

                <label>New Password</label>
                <InputText class="form-control" @bind-Value="_changePassword.NewPassword"></InputText>
                @if (_loadingNewPassword)
                {
                    <div class="spinner-border mt-2" role="status">
                        <span class="visually-hidden">&nbsp;</span>
                    </div>
                }
                else
                {
                    <button type="submit" class="btn btn-primary mt-2">Set new password</button>
                }
            </EditForm>
        </div>
        <div class="col col-sm-6 col-md-6 col-lg-6 col-xl-6">
            <h2>Bookings</h2>
            @if (_bookingRooms.Any())
            {
                <div class="accordion" id="accordionExample">
                    @for (int i = 0; i < _bookingRooms.Count; i++)
                    {
                        var bookingRoom = _bookingRooms[i];
                        <div class="accordion-item">
                            <h2 class="accordion-header" id="@($"heading{i}")">
                                <button class="accordion-button" type="button" data-bs-toggle="collapse"
                                        data-bs-target="@($"#collapse{i}")" aria-expanded="true" aria-controls="@($"collapse{i}")">
                                    Booking #@(i + 1)
                                </button>
                            </h2>
                            <div id="@($"collapse{i}")" class="accordion-collapse collapse"
                                 aria-labelledby="@($"heading{i}")"
                                 data-bs-parent="#accordionExample">
                                <div class="accordion-body">
                                    Booking ID: @bookingRoom.BookingId <br/>
                                    @foreach (string roomId in bookingRoom.RoomIds)
                                    {
                                        <div>
                                            Room ID: @roomId <a href="/room/@roomId">Go to room</a>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }

                </div>
            }
            else
            {
                <p>No bookings yet!</p>
            }
        </div>
    </div>
}
else
{
    <h2>Log in to view details</h2>
}

@code {
    SessionTokenDto? _userInfo;
    ChangeOwnPasswordDto _changePassword = new();
    List<BookingRoomsDto> _bookingRooms = [];
    bool _loadingNewPassword;

    protected override async Task OnInitializedAsync()
    {
        AuthService.OnUserChangedSubscribtion += OnUserChangedSubscription;
        var user = await StorageService.GetItemFromSessionStorageAsync("user");
        if (string.IsNullOrEmpty(user))
        {
            Console.WriteLine("No user session token");
            return;
        }

        try
        {
            var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };
            _userInfo = JsonSerializer.Deserialize<SessionTokenDto>(user, options)!;
            await GetBookingsRoomsForUser();
        }
        catch (JsonException ex)
        {
            Console.WriteLine("Json exception caught serializing to UserLoginDto: " + ex.Message);
            return;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Generel exception caught serializing to UserLoginDto: " + ex.Message);
            return;
        }

        StateHasChanged();
    }

    private async Task GetBookingsRoomsForUser()
    {
        if (_userInfo == null)
        {
            await JS.InvokeVoidAsync("alert", "user info is null");
            return;
        }

        try
        {
            var (status, msg, bookingRoomsDto) = await ApiService.GetUsersBookingsRooms(_userInfo.Id);
            if (status)
            {
                _bookingRooms = bookingRoomsDto.bookingRooms;
                foreach (var bookingsRooms in bookingRoomsDto.bookingRooms)
                {
                    Console.WriteLine("BookingId: " + bookingsRooms.BookingId);
                }
            }
            else
            {
                Console.WriteLine("Piss");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exception getting user bookings" + ex.Message + "StackTrace: " + ex.StackTrace);
            return;
        }
    }

    private async Task ChangePassword()
    {
        Console.WriteLine("Changing password");
        _loadingNewPassword = true;
        StateHasChanged();

        try
        {
            string? token = await StorageService.GetItemFromLocalStorageAsync("authToken");
            if (string.IsNullOrEmpty(token))
            {
                await JS.InvokeVoidAsync("alert", "No token found, please re-login");
            }
            else
            {
                var (status, msg) = await ApiService.ChangeOwnPassword(_changePassword.CurrentPassword, _changePassword.NewPassword, token);
                await JS.InvokeVoidAsync("alert", msg);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            await JS.InvokeVoidAsync("alert", "Error updating password");
            throw;
        }

        _changePassword = new();
        _loadingNewPassword = false;
        StateHasChanged();
    }

    private void OnUserChangedSubscription()
    {
        InvokeAsync(async () =>
        {
            // Re-fetch user info here if needed
            await OnInitializedAsync(); // or just StateHasChanged()
        });
    }

    public void Dispose()
    {
        AuthService.OnUserChangedSubscribtion -= OnUserChangedSubscription;
    }

    private class ChangePasswordDto
    {
        public string CurrentPassword { get; set; }

        [Required(ErrorMessage = "Password is required")]
        [MinLength(8, ErrorMessage = "Password must be at least 8 characters long")]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$",
            ErrorMessage =
                "Password must contain at least one number, one uppercase letter, one lowercase letter, and one special character")]
        public string NewPassword { get; set; }

        [Required(ErrorMessage = "Password is required")]
        [MinLength(8, ErrorMessage = "Password must be at least 8 characters long")]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$",
            ErrorMessage =
                "Password must contain at least one number, one uppercase letter, one lowercase letter, and one special character")]
        public string NewRepeatedPassword { get; set; }
    }

}