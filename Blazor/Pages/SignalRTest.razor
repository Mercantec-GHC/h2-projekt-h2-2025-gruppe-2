@page "/signalr"
@using System.Text.Json
@using Microsoft.AspNetCore.SignalR.Client
@inject HubConnection hubConnection
@inject IJSRuntime JS
@inject StorageService Storage

<div class="container">
    @if (_userInfo != null)
    {
        <h3>SignalR Chat</h3>
        <div>
            @if (IsAdmin)
            {
                <EditForm Model="@this">
                    <input @bind="_message" placeholder="Type your message..."/>
                    <input @bind="_targetUserId" placeholder="Target user ID..."/>
                    <button class="btn btn-primary" @onclick="SendAdminReply">Send to user</button>
                </EditForm>
                <div class="row">
                    @foreach (var userGroup in _messages.GroupBy(m => m.UserDestinationId))
                    {
                        <div class="col-4">
                            <SignalRUserCard UserName="@userGroup.Key" Msgs="@userGroup.ToList()"/>
                        </div>
                    }

                </div>
            }
            else
            {
                <EditForm Model="@this">
                    <input @bind="_message" placeholder="Type your message..."/>
                    <button class="btn btn-primary" @onclick="SendMessageToAdmin">Send to admin</button>
                </EditForm>
                <SignalRUserCard UserName="@_userInfo.Id" Msgs="@_messages"/>
            }
        </div>
    }
    else
    {
        <p>Please login to continue</p>
    }
</div>

@code {
    private string _message = string.Empty;
    private string _targetUserId = string.Empty; // For admin only
    private List<UserMsgs> _messages = new();
    private SessionTokenDto? _userInfo;

    private const string AdminUserId = "4f8a2997-3e89-4e19-826b-062391224f58";

    private bool IsAdmin => _userInfo?.Id == AdminUserId;

    protected override async Task OnInitializedAsync()
    {
        string sessionToken = await Storage.GetItemFromSessionStorageAsync("user");
        if (string.IsNullOrEmpty(sessionToken))
        {
            await JS.InvokeVoidAsync("alert", "No session token found");
            return;
        }

        _userInfo = JsonSerializer.Deserialize<SessionTokenDto>(sessionToken, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

        hubConnection.On<string, string, string>("ReceiveMessage", (senderUserId, destinationUserId, msg) =>
        {
            _messages.Add(new UserMsgs
            {
                UserSenderId = senderUserId,
                UserDestinationId = destinationUserId,
                Msg = msg,
                IsAdmin = false
            });
            StateHasChanged();
        });

        hubConnection.On<string, string, string>("ReceiveMessageAsAdmin", (senderUserId, destinationUserId, msg) =>
        {
            _messages.Add(new UserMsgs
            {
                UserSenderId = senderUserId,
                UserDestinationId = destinationUserId,
                Msg = msg,
                IsAdmin = true
            });
            StateHasChanged();
        });

        try
        {
            await hubConnection.StartAsync();
            if (hubConnection.State == HubConnectionState.Connected)
            {
                await JoinChat();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error connecting SignalR: " + ex);
            await JS.InvokeVoidAsync("alert", "Error connecting SignalR: " + ex.Message);
        }
    }

    private async Task JoinChat()
    {
        if (hubConnection.State == HubConnectionState.Connected && _userInfo != null)
        {
            await hubConnection.SendAsync("JoinUserChat", _userInfo.Id);
        }
    }

    private async Task SendMessageToAdmin()
    {
        if (hubConnection.State == HubConnectionState.Connected && _userInfo != null)
        {
            await hubConnection.SendAsync("SendMessageToAdmin", _userInfo.Id, _message);
            _message = string.Empty;
        }
    }

    private async Task SendAdminReply()
    {
        if (hubConnection.State == HubConnectionState.Connected && !string.IsNullOrWhiteSpace(_targetUserId))
        {
            await hubConnection.SendAsync("AdminReplyToUser", _targetUserId, _message);
            _message = string.Empty;
        }
    }

    private async Task PrintUsers()
    {
        await hubConnection.SendAsync("PrintUsers");
    }

    public class UserMsgs
    {
        public string UserSenderId { get; set; }
        public string UserDestinationId { get; set; }
        public string Msg { get; set; }
        public bool IsAdmin { get; set; }
    }

}