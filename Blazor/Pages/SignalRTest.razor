@page "/signalr"
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using Microsoft.AspNetCore.SignalR.Client
@inject APIService Api
@inject HubConnection hubConnection
@inject IJSRuntime JS
@inject AuthService AuthService
@inject StorageService Storage
@implements IAsyncDisposable

<div class="container">
    @if (_userInfo != null)
    {
        <h3>SignalR Chat</h3>
        <div>
            @if (_isAdmin)
            {
                <EditForm Model="@_message" OnValidSubmit="SendAdminReply">
                    <DataAnnotationsValidator/>
                    <input @bind="_message.Msg" placeholder="Type your message..."/>
                    <input @bind="_targetUserId" placeholder="Target user ID..."/>
                    <button class="btn btn-primary">Send to user</button>
                    <div class="fade-validation-summary">
                        <ValidationSummary/>
                    </div>
                </EditForm>
                <div class="row">
                    @{
                        var adminId = "4f8a2997-3e89-4e19-826b-062391224f58";

                        var userIds = _messages
                            .Where(m => !m.IsAdmin) // Exclude admin-only messages from ID gathering unless they're to a user
                            .SelectMany(m => new[] { m.UserSenderId, m.UserDestinationId })
                            .Distinct();

                        // For each user ID, group messages where:
                        // - The user is the sender or the destination
                        // - OR they're the destination of an admin message
                        var groupedMessages = userIds
                            .Select(userId => new
                            {
                                UserId = userId,
                                Messages = _messages
                                    .Where(m =>
                                            (m.UserSenderId == userId) ||
                                            (m.UserDestinationId == userId)
                                    )
                                    .ToList()
                            })
                            .Where(g => g.Messages.Any())
                            .Where(g => g.UserId != adminId);
                    }
                    @foreach (var userGroup in groupedMessages)
                    {
                        <div class="col-4">
                            <SignalRUserCard
                                UserName="@userGroup.UserId"
                                Msgs="@userGroup.Messages"
                                OnCopy="OnCopyUserId"/>
                        </div>
                    }
                </div>
            }
            else
            {
                <EditForm Model="@_message" OnValidSubmit="SendMessageToAdmin">
                    <DataAnnotationsValidator/>
                    <input @bind="_message.Msg" placeholder="Type your message..."/>
                    <button class="btn btn-primary">Send to admin</button>
                    <div class="fade-validation-summary">
                        <ValidationSummary/>
                    </div>
                </EditForm>
                <SignalRUserCard
                    UserName="You"
                    Msgs="@_messages"
                    OnCopy="OnCopyUserId"
                    IsUser="true"/>
            }
        </div>
    }
    else
    {
        <p>Please login to continue</p>
    }
</div>

@code {
    private Message _message = new();
    private string _targetUserId = string.Empty; // For admin only
    private List<Message> _messages = new();
    private SessionTokenDto? _userInfo;
    private bool _isAdmin;
    private string? _jwtToken;

    protected override async Task OnInitializedAsync()
    {
        AuthService.OnUserChangedSubscribtion += OnUserChangedSubscription;
        await Setup();
    }

    private async Task Setup()
    {
        _jwtToken = await Storage.GetItemFromLocalStorageAsync("authToken");
        if (string.IsNullOrEmpty(_jwtToken))
        {
            await JS.InvokeVoidAsync("alert", "No JWT, please login");
            _userInfo = null;
            await hubConnection.StopAsync();
            return;
        }

        _isAdmin = await ApiService.IsUserAdmin(_jwtToken);

        string sessionToken = await Storage.GetItemFromSessionStorageAsync("user");
        if (string.IsNullOrEmpty(sessionToken))
        {
            await JS.InvokeVoidAsync("alert", "No session token found");
            _userInfo = null;
            await hubConnection.StopAsync();
            return;
        }

        _userInfo = JsonSerializer.Deserialize<SessionTokenDto>(sessionToken, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

        hubConnection.On<string, string, string>("ReceiveMessage", (senderUserId, destinationUserId, msg) =>
        {
            _messages.Add(new Message
            {
                UserSenderId = senderUserId,
                UserDestinationId = destinationUserId,
                Msg = msg,
                IsAdmin = false,
                CreatedAt = DateTime.UtcNow.AddHours(2),
                UpdatedAt = DateTime.UtcNow.AddHours(2)
            });
            StateHasChanged();
        });

        hubConnection.On<string, string, string>("ReceiveMessageAsAdmin", (senderUserId, destinationUserId, msg) =>
        {
            _messages.Add(new Message
            {
                UserSenderId = senderUserId,
                UserDestinationId = destinationUserId,
                Msg = msg,
                IsAdmin = true,
                CreatedAt = DateTime.UtcNow.AddHours(2),
                UpdatedAt = DateTime.UtcNow.AddHours(2)
            });
            StateHasChanged();
        });

        hubConnection.On<string, string, string>("ReceiveUserJoinedMessage", (senderUserId, destinationUserId, msg) =>
        {
            _messages.Add(new Message
            {
                UserSenderId = senderUserId,
                UserDestinationId = destinationUserId,
                Msg = msg,
                IsAdmin = false,
                CreatedAt = DateTime.UtcNow.AddHours(2),
                UpdatedAt = DateTime.UtcNow.AddHours(2)
            });
            StateHasChanged();
        });

        try
        {
            await hubConnection.StartAsync();
            if (hubConnection.State == HubConnectionState.Connected)
            {
                await JoinChat();
                await GetHistory(_userInfo.Id, _jwtToken);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error connecting SignalR: " + ex);
            await JS.InvokeVoidAsync("alert", "Error connecting SignalR: " + ex.Message);
        }
    }

    private async Task AddNewHistoryMsg(string jwt, string msg, string destinationId, bool isAdmin)
    {
        string? result = await Api.PostHistoryAsync(jwt, msg, destinationId, isAdmin);
        if (result != null)
        {
            await JS.InvokeVoidAsync("alert", result);
        }

        StateHasChanged();
    }

    private async Task GetHistory(string userId, string jwt)
    {
        var (msg, history) = await Api.GetUserHistoryByUserId(userId, jwt);
        if (history == null)
        {
            await JS.InvokeVoidAsync("alert", msg);
            return;
        }

        if (!history.Any())
        {
            await JS.InvokeVoidAsync("alert", "No history");
            return;
        }

        _messages = history;

        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection.State == HubConnectionState.Connected)
        {
            try
            {
                await hubConnection.StopAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error disconnecting: " + ex);
                return;
            }
        }

        DisposeAuthService();
    }

    private void OnUserChangedSubscription()
    {
        InvokeAsync(async () =>
        {
            await Setup();
            StateHasChanged();
        });
    }

    private void DisposeAuthService()
    {
        AuthService.OnUserChangedSubscribtion -= OnUserChangedSubscription;
    }

    private async Task JoinChat()
    {
        if (hubConnection.State == HubConnectionState.Connected && _userInfo != null)
        {
            await hubConnection.SendAsync("JoinUserChat", _userInfo.Id);
        }
    }

    private async Task SendMessageToAdmin()
    {
        if (hubConnection.State == HubConnectionState.Connected && _userInfo != null)
        {
            await hubConnection.SendAsync("SendMessageToAdmin", _userInfo.Id, _message.Msg);
            await AddNewHistoryMsg(_jwtToken, _message.Msg, "4f8a2997-3e89-4e19-826b-062391224f58", false);
            _message.Msg = string.Empty;
        }
    }

    private async Task SendAdminReply()
    {
        if (hubConnection.State == HubConnectionState.Connected && !string.IsNullOrWhiteSpace(_targetUserId))
        {
            await hubConnection.SendAsync("AdminReplyToUser", _targetUserId, _message.Msg);
            await AddNewHistoryMsg(_jwtToken, _message.Msg, _targetUserId, true);
            _message.Msg = string.Empty;
        }
    }
    
    private void OnCopyUserId(string userId)
    {
        _targetUserId = userId;
        StateHasChanged();
    }

}